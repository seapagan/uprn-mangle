[tool.poetry]
name = "uprn-mangle"
version = "0.2.0"
description = "Mangle and Serve UPRN data as an API."
authors = ["Grant Ramsay <seapagan@gmail.com>"]
readme = "README.md"
license = "MIT"

repository = "https://github.com/seapagan/uprn-mangle"

[[tool.poetry.packages]]
include = "uprn_mangle"
from = "."


[tool.poetry.urls]
# customize the below URLs to point to your own GitHub repo. These will be
# shown on [Pypi.org](https://pypi.org/) if you are creating a public package.
"Pull Requests" = "https://github.com/seapagan/uprn-mangle/pulls"
"Bug Tracker" = "https://github.com/seapagan/uprn-mangle/issues"
"Changelog" = "https://github.com/seapagan/uprn-mangle/blob/main/CHANGELOG.md"

[tool.poetry.scripts]
# will enable this when the package code is ready.
# uprn-mangle = "uprn_mangle.main:app"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
uvicorn = { extras = ["standard"], version = "^0.29.0" }
fastapi = "^0.111.0"
rich = "^13.7.1"

simple-toml-settings = "^0.6.1"
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Configure dev dependencies
[tool.poetry.group.dev.dependencies]
dask = { extras = ["dataframe"], version = "^2024.5.0" }
pandas = "^2.2.2"
psycopg2 = "^2.9.9"
python-dotenv = "^1.0.1"
sqlalchemy = "^2.0.30"
cursor = "^1.3.5"
ipython = "^8.24.0"
tqdm = "^4.66.4"

# linting, type-checking and security checks
mypy = "^1.8.0"
pre-commit = "^3.6.2"
pymarkdownlnt = "^0.9.12"
ruff = "^0.4.3"

# task runner
poethepoet = "^0.26.1"

# testing
greenlet = "^3.0.3"
pytest = "^8.1.0"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.5.0"
pytest-sugar = ">=1.0.0"
pytest-randomly = "^3.15.0"
pytest-reverse = "^1.7.0"
pytest-mock = "^3.12.0"
pytest-watcher = "^0.4.1"
mock = "^5.1.0"
faker = ">=23.3.0"
pyfakefs = "^5.3.5"

# documentation
github-changelog-md = "^0.9.1"
mkdocs = "^1.5.3"
mkdocs-autorefs = ">=1.0.1"
mkdocs-material = "^9.5.12"
mkdocs-git-revision-date-localized-plugin = "^1.2.4"
mkdocs-latest-git-tag-plugin = "^0.1.2"
mkdocs-minify-plugin = ">=0.8.0"
mkdocstrings = ">=0.24.1"
pymdown-extensions = "^10.7"
pygments = "^2.17.2"
# typing stubs
pandas-stubs = "^2.2.2.240514"

[tool.poe.tasks]
# setup PoeThePoet tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy uprn_mangle/**/*.py tests/**/*.py --strict"
mypy.help = "Run mypy checks"
format.cmd = "ruff format ."
format.help = "Format code with Ruff"
ruff.cmd = "ruff check ."
ruff.help = "Run Ruff checks"
markdown.cmd = "pymarkdown scan  -r uprn_mangle/**/*.md docs/**/*.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

test.cmd = "pytest"
test.help = "Run all tests (pytest)"
"test:watch".cmd = "ptw . --now --clear"
"test:watch".help = "Run tests using Pytest in watch mode"

"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:9000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

# generate a CHANGELOG.md file from GitHub releases
changelog.cmd = "github-changelog-md"
changelog.help = "Generate a CHANGELOG.md file"

# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false

[tool.ruff]
line-length = 80
lint.select = ["ALL"] # we are being very strict!
lint.ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us üòù
lint.extend-ignore = [
  "COM812",
  "ISC001",
] # these are ignored for ruff formatting

src = ["uprn_mangle"]
target-version = "py310" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"**/tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files
]

[tool.ruff.lint.isort]
known-first-party = []

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
python_version = "3.10"

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

# Options for pytest and coverage
[tool.pytest.ini_options]
addopts = [
  "-m",
  "not rewrite",
  "--cov",
  "--cov-report",
  "term-missing",
  "--cov-report",
  "html",
]
filterwarnings = []
mock_use_standalone_module = true
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "rewrite: Tests need Rewriting",  # will be skipped automatically
]

[tool.coverage.run]
# source = []
omit = ["*/tests/*"]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
show_missing = true
