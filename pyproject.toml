[project]
name = "uprn-mangle"
version = "0.2.0"
description = "Mangle and Serve UPRN data as an API."
authors = [{ name = "Grant Ramsay", email = "seapagan@gmail.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"

dependencies = [
  "asyncpg ==0.30.0",
  "dask[dataframe,distributed] == 2024.9.0",
  "fastapi ==0.115.5",
  "fastapi-pagination ==0.12.32",
  "pandas == 2.2.2",
  "psycopg2 ==2.9.10",
  "python-dotenv == 1.0.1",
  "rich == 13.7.1",
  "simple-toml-settings == 0.8.0",
  "sqlalchemy ==2.0.36",
  "tqdm == 4.66.4",
  "uvicorn[standard] == 0.30.6",
]


[project.urls]
# customize the below URLs to point to your own GitHub repo. These will be
# shown on [Pypi.org](https://pypi.org/) if you are creating a public package.
"Repository" = "https://github.com/seapagan/uprn-mangle"
"Pull Requests" = "https://github.com/seapagan/uprn-mangle/pulls"
"Bug Tracker" = "https://github.com/seapagan/uprn-mangle/issues"
"Changelog" = "https://github.com/seapagan/uprn-mangle/blob/main/CHANGELOG.md"

[tool.uv]
dev-dependencies = [
  "cursor == 1.3.5",
  "ipython == 8.26.0",
  "mypy == 1.11.2",
  "pre-commit == 3.8.0",
  "pymarkdownlnt == 0.9.21",
  "ruff ==0.7.4",
  "poethepoet == 0.27.0",
  "greenlet == 3.0.3",
  "pytest == 8.3.3",
  "pytest-cov == 5.0.0",
  "pytest-xdist == 3.6.1",
  "pytest-sugar == 1.0.0",
  "pytest-randomly == 3.15.0",
  "pytest-reverse == 1.7.0",
  "pytest-mock == 3.14.0",
  "pytest-watcher == 0.4.2",
  "mock == 5.1.0",
  "faker == 26.0.0",
  "pyfakefs == 5.6.0",
  "github-changelog-md ==0.9.5",
  "mkdocs == 1.6.0",
  "mkdocs-autorefs == 1.2.0",
  "mkdocs-material == 9.5.34",
  "mkdocs-git-revision-date-localized-plugin == 1.2.6",
  "mkdocs-latest-git-tag-plugin == 0.1.2",
  "mkdocs-minify-plugin == 0.8.0",
  "mkdocstrings == 0.26.1",
  "pymdown-extensions == 10.9",
  "pygments == 2.18.0",
  "pandas-stubs ==2.2.3.241009",
  "memory-profiler == 0.61.0",
  "ipykernel == 6.29.5",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


# Configure dev dependencies
[tool.poe.tasks]
# setup PoeThePoet tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy --config-file pyproject.toml uprn_mangle/backend/**/*.py tests/**/*.py --strict"
mypy.help = "Run mypy checks"
format.cmd = "ruff format ."
format.help = "Format code with Ruff"
ruff.cmd = "ruff check ."
ruff.help = "Run Ruff checks"
markdown.cmd = "pymarkdown scan  -r uprn_mangle/**/*.md docs/**/*.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

test.cmd = "pytest"
test.help = "Run all tests (pytest)"
"test:watch".cmd = "ptw . --now --clear"
"test:watch".help = "Run tests using Pytest in watch mode"

"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -a 0.0.0.0:9000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

# generate a CHANGELOG.md file from GitHub releases
changelog.cmd = "github-changelog-md"
changelog.help = "Generate a CHANGELOG.md file"

# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false
plugins.md024.enabled = false

[tool.pymarkdown.plugins.md013]
line-length = 80
code_blocks = false
images = false

[tool.ruff]
line-length = 80
lint.select = ["ALL"] # we are being very strict!
lint.ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us üòù
lint.extend-ignore = [
  "COM812",
  "ISC001",
] # these are ignored for ruff formatting

src = ["uprn_mangle"]
target-version = "py310" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"**/tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.params.Depends",
  "fastapi.Query",
  "fastapi.params.Query",
]

[tool.ruff.lint.isort]
known-first-party = []

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
plugins = ["pydantic.mypy"]
disallow_untyped_defs = true
python_version = "3.10"
exclude = ["uprn_mangle/frontend"]

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

[[tool.mypy.overrides]]
# disable_error_code = ["no-untyped-call"]
module = "dask.*"
disallow_untyped_calls = false

# Options for pytest and coverage
[tool.pytest.ini_options]
addopts = [
  "-m",
  "not rewrite",
  "--cov",
  "--cov-report",
  "term-missing",
  "--cov-report",
  "html",
]
filterwarnings = []
mock_use_standalone_module = true
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "rewrite: Tests need Rewriting",  # will be skipped automatically
]

[tool.coverage.run]
# source = []
omit = ["*/tests/*"]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
show_missing = true
